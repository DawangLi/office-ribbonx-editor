# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'filePath'
    filePath: 'PreBuild.ps1'
    arguments: '"$(Build.BuildId)" "$(Build.SourceBranchName)"'

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Copy main executable and installer into the staging directory
- task: CopyFiles@2
  inputs:
    sourceFolder: ''
    contents: 'CustomUIEditor/bin/$(buildConfiguration)/**.exe'
    targetFolder: '$(Build.ArtifactStagingDirectory)/Binary'
    cleanTargetFolder: true # Optional
    flattenFolders: true # Optional
    #overWrite: false # Optional
- task: CopyFiles@2
  inputs:
    sourceFolder: ''
    contents: 'Installer/bin/$(buildConfiguration)/**.msi'
    targetFolder: '$(Build.ArtifactStagingDirectory)/Installer'
    cleanTargetFolder: true # Optional
    flattenFolders: true # Optional
    #overWrite: false # Optional

# Publish Build Artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/Binary' 
    artifactName: 'WindowsBinary' 
    publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/Installer' 
    artifactName: 'WindowsInstaller' 
    publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
    
- task: GithubRelease@0 
  displayName: 'Create GitHub Release'   
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')   
  inputs:
    action: 'create'
    target: '$(Build.SourceVersion)'
    githubConnection: 'fernandreu-pat'
    repositoryName: 'fernandreu/wpf-custom-ui-editor'
    assets: '$(Build.ArtifactStagingDirectory)/**/*.@(exe|msi)'
    tagSource: 'manual'
    tag: '$(Build.SourceBranchName)'
    title: 'Custom UI Editor $(ThreeDigitVersion).$(Build.BuildId)'
    releaseNotesSource: 'input'
    addChangelog: true
    isDraft: true  # The release notes will need tweaks anyway, so there is no point in releasing it directly
    releaseNotes: |
      ## What's New

      For a full list of changes, see below. 

      ## How to install / use
      The tool can be installed / used in two ways:
      - By running the `.msi` installer provided in the `Assets` section below. This will create an entry in the control panel's programs list
      - By directly running the `.exe` provided in the `Assets` section below. This will not create any entry in the control panel's programs list      
      
