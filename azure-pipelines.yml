
trigger:
  branches:
    include:
    - master
    - multitarget
  tags:
    include:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2019'

variables:
- group: GitHubPATGroup
- group: CodeSign
- name: solution
  value: '**/*.sln'

jobs:
- job: NetFramework
  displayName: .NET Framework
  variables:
    targetFramework: net461

  steps:

  - task: InstallSSHKey@0
    displayName: Install SSH key for code signing
    inputs:
      knownHostsEntry: '$(CODESIGN_KNOWN_HOSTS)'
      sshPublicKey: '$(CODESIGN_PUBLIC_KEY)'
      sshKeySecureFile: 'id_rsa'

  - task: PowerShell@2
    displayName: 'PreBuildSteps'
    inputs:
      targetType: 'filePath'
      filePath: 'build/PreBuild.ps1'
      arguments: '"$(Build.BuildId)" "$(Build.SourceBranch)"'

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      msbuildArgs: '/p:TargetFramework=$(targetFramework) /p:_InstallerTargetFramework=$(targetFramework)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    displayName: 'RunTests'
    condition: not(startsWith(variables['targetFramework'], 'netcoreapp'))
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Executable'
    inputs:
      sourceFolder: ''
      contents: |
        src/OfficeRibbonXEditor/bin/$(buildConfiguration)/$(targetFramework)/**.exe
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true # Optional
      flattenFolders: true # Optional

  - task: PowerShell@2
    displayName: 'Check if executable is really copied'
    inputs:
      targetType: inline
      script: |
        if (-not (Test-Path "$(Build.ArtifactStagingDirectory)\OfficeRibbonXEditor.exe")) {
          Write-Host "##vso[task.LogIssue type=error;]Missing executable in staging directory"
          exit 1
        }

  - task: PublishBuildArtifacts@1
    displayName: 'Publish executable (unsigned)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Framework Executable (Unsigned)'
      publishLocation: 'Container' # Options: container, filePath

  - task: PowerShell@2
    displayName: 'Sign executable'
    inputs:
      targetType: inline
      ignoreLASTEXITCODE: true
      script: |
        . ./build/sign/remote-sign.ps1
        $result = Update-AllFiles "$(Build.ArtifactStagingDirectory)" -HostName "$(CODESIGN_HOST)" -Pin "$(CODESIGN_PIN)" -Port "$(CODESIGN_PORT)"
        Write-Host "##vso[task.setvariable variable=CodeSignSuccess;]$result"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish executable (unsigned)'
    condition: eq(variables['CodeSignSuccess'], true)
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Framework Executable (Unsigned)'
      publishLocation: 'Container' # Options: container, filePath

  - task: CopyFiles@2
    displayName: 'Copy installer'
    inputs:
      sourceFolder: ''
      contents: |
        src/Installer/bin/$(buildConfiguration)/$(targetFramework)/**.msi
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true # Optional
      flattenFolders: true # Optional

  - task: PowerShell@2
    displayName: 'Check if installer is really copied'
    inputs:
      targetType: inline
      script: |
        if (-not (Test-Path "$(Build.ArtifactStagingDirectory)\OfficeRibbonXEditor.msi")) {
          Write-Host "##vso[task.LogIssue type=error;]Missing installer in staging directory"
          exit 1
        }

  - task: PublishBuildArtifacts@1
    displayName: 'Publish installer (unsigned)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Framework Installer (Unsigned)'
      publishLocation: 'Container' # Options: container, filePath

  - task: PowerShell@2
    displayName: 'Sign installer'
    inputs:
      targetType: inline
      ignoreLASTEXITCODE: true
      script: |
        . ./build/sign/remote-sign.ps1
        $result = Update-AllFiles "$(Build.ArtifactStagingDirectory)" -HostName "$(CODESIGN_HOST)" -Pin "$(CODESIGN_PIN)" -Port "$(CODESIGN_PORT)"
        Write-Output "Result is: $result"
        Write-Host "##vso[task.setvariable variable=CodeSignSuccess;]$result"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish installer (signed)'
    condition: eq(variables['CodeSignSuccess'], true)
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Framework Installer'
      publishLocation: 'Container' # Options: container, filePath

- job: NetCore
  displayName: .NET Core
  variables:
    targetFramework: netcoreapp3.0

  steps:

  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: '$(CODESIGN_KNOWN_HOSTS)'
      sshPublicKey: '$(CODESIGN_PUBLIC_KEY)'
      sshKeySecureFile: 'id_rsa'

  - task: PowerShell@2
    displayName: 'PreBuildSteps'
    inputs:
      targetType: 'filePath'
      filePath: 'build/PreBuild.ps1'
      arguments: '"$(Build.BuildId)" "$(Build.SourceBranch)"'
      
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: '**/*Tests.csproj'
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: publish
      projects: '**/OfficeRibbonXEditor.csproj'
      publishWebProjects: false
      zipAfterPublish: false
      arguments: '-p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework) --output $(Build.ArtifactStagingDirectory)'
      configuration: '$(buildConfiguration)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish binaries (unsigned)'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Core Binaries (Unsigned)'
      publishLocation: 'Container' # Options: container, filePath

  - task: PowerShell@2
    displayName: 'Sign binaries'
    inputs:
      targetType: inline
      ignoreLASTEXITCODE: true
      script: |
        . ./build/sign/remote-sign.ps1
        $result = Update-AllFiles "$(Build.ArtifactStagingDirectory)" -HostName "$(CODESIGN_HOST)" -Pin "$(CODESIGN_PIN)" -Port "$(CODESIGN_PORT)"
        Write-Host "##vso[task.setvariable variable=CodeSignSuccess;]$result"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish binaries (signed)'
    condition: eq(variables['CodeSignSuccess'], true)
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '.NET Core Binaries'
      publishLocation: 'Container' # Options: container, filePath
